---

# Assert that required name element is present
- name: ensure vpc_subnets array contains name key
  assert:
    that:
      - subnet.name is defined
      - subnet.name | length > 0
    msg: "aws_vpc_subnets[x].subnets[y].name not defined, but required"

# Assert that required subnet cidr element is present
- name: ensure vpc_subnets subnets array is defined correctly
  assert:
    that:
      - subnet.cidr is defined
    msg: "aws_vpc_subnets[x].subnets[y].cidr not defined, but required"

- name: "ensure subnet with cidr {{ subnet.cidr }} in vpc  {{ aws_vpc_subnet_vpc_id }} is deleted"
  ec2_vpc_subnet:
    # Fixed values
    state: absent
    purge_tags: True
    wait: True
    # Looked-up values
    vpc_id: "{{ aws_vpc_subnet_vpc_id }}"
    cidr: "{{ subnet.cidr }}"
    # Optional values
    az: "{{ subnet.region | default(aws_vpc_subnet_default_region) }}{{ subnet.az | default(omit) }}"
    map_public: "{{ subnet.public | default(aws_vpc_subnet_default_public) }}"
    region: "{{ vpc.region | default(aws_vpc_subnet_default_region | default(omit)) }}"
    aws_access_key: "{{ lookup('ENV', 'AWS_ACCESS_KEY') | default(omit) }}"
    aws_secret_key: "{{ lookup('ENV', 'AWS_SECRET_KEY') | default(omit) }}"
    security_token: "{{ lookup('ENV', 'AWS_SECURITY_TOKEN') | default(omit) }}"
    profile: "{{ aws_vpc_subnet_profile | default(omit) }}"
  when: aws_vpc_subnet_vpc_id is defined
